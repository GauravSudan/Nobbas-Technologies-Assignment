# Natural Language Processing

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('CSV 1.csv')
X = dataset.iloc[:, 9].values
# Cleaning the texts
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []

for i in range(0, 900):
    review = re.sub('[^a-zA-Z]', ' ', str(X[i]))
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)

# Creating the Bag of Words model

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
    
dataset['grade']=labelencoder_X.fit_transform(dataset['grade'])
    
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 10000)
x = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, 25].values

# Splitting the dataset into the Training set and Test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

from sklearn.metrics import classification_report
print ('\nClasification report:\n', classification_report(y_test, y_pred))

from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, y_pred)

# Applying k-Fold Cross Validation
from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)
accuracies.mean()
accuracies.std()



print('----------------RESULTS----------------')
print('Model accuracy (%) = ',accuracies.mean()*100)
print('Model Standard Deviation (%) =',accuracies.std()*100) 
print('Mean Squared Error = ',mean_squared_error(y_test, y_pred))
print ('\nClasification report:\n', classification_report(y_test, y_pred))

print('---------------------------------------')









---------------------------------------------------------RESULTS------------------------------------------

----------------RESULTS----------------
Model accuracy (%) =  52.24439942547215
Model Standard Deviation (%) = 3.92615370098544
Mean Squared Error =  1.211111111111111

Clasification report:
              precision    recall  f1-score   support

          0       0.45      0.39      0.42        56
          1       0.63      0.61      0.62        62
          2       0.44      0.50      0.47        62

avg / total       0.51      0.51      0.51       180
