import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


data = pd.read_csv('CSV 1 NEW.csv')

X = data.iloc[:, [0,1,4,7,8,13,14,16,17,19,20,21]].values
Y = data.iloc[:, 25].values
Y=np.reshape(Y,(len(Y),1))

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

# Feature Scaling (VALUES B/W -1 to 1)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
#######################################################################################
import keras
from keras.models import Sequential                    #Used to initialise the neural n/w
from keras.layers import Dense,LSTM   #Step 1 of Image        #Used to make layers of ANN

y_train = np.reshape(y_train, (y_train.shape[0], 1, y_train.shape[1]))

X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))
y_test = np.reshape(y_test, (y_test.shape[0], 1, y_test.shape[1]))
classifier = Sequential()    #Sequential is a class that is used to add different layers in our ANN model
# Adding the input layer and the first hidden layer
classifier.add(LSTM(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 12,return_sequences=True ))
# Adding the output layer

classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'tanh'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = ['accuracy'])

X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))

classifier.fit(X_train, y_train, batch_size = 5, nb_epoch = 1000)
y_pred = classifier.predict(X_test)

y_pred = np.reshape(y_pred, (y_pred.shape[0],  y_pred.shape[1]))
y_test = np.reshape(y_test, (y_test.shape[0],  y_test.shape[1]))


from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, y_pred)



print('----------------RESULTS----------------')
print('Mean Squared Error = ',mean_squared_error(y_test, y_pred))
print('---------------------------------------')





------------------------------------RESULTS------------------------------------------------
Training Loss : 0.39
Training Accuracy : 0.60
MSE : 0.54
