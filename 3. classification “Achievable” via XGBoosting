import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


data = pd.read_csv('CSV 1 NEW.csv')

X = data.iloc[:, [0,1,4,7,8,13,14,16,17,19,20,21,24]].values
Y = data.iloc[:, 25].values
Y=np.reshape(Y,(len(Y),1))

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

# Feature Scaling (VALUES B/W -1 to 1)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
#######################################################################################

from sklearn.ensemble import AdaBoostClassifier
model = AdaBoostClassifier(random_state=1)
model.fit(X_train, y_train)
model.score(X_test,y_test)

#######################################################################################
# Part 3 - Making the predictions and evaluating the model
#classifier.fit(X_test, y_test, batch_size = 5, nb_epoch = 10)


# Predicting the Test set results

y_pred = model.predict(X_test)

from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, y_pred)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

# Applying k-Fold Cross Validation
from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = model, X = X_train, y = y_train, cv = 10)
accuracies.mean()
accuracies.std()



print('----------------RESULTS----------------')
print('Model accuracy (%) = ',model.score(X_test,y_test)*100)
print('Model Standard Deviation (%) =',accuracies.std()*100) 
print('Mean Squared Error = ',mean_squared_error(y_test, y_pred))
print('---------------------------------------')

